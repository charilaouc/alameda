// Code generated by go-bindata. DO NOT EDIT.
// sources:
// kafka-topic.json
// kafka-consumergroup.json
// nginx.json
// machinegroup.json
// machineset.json

package schema


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataKafkatopicjson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\xb1\x6a\xc4\x30\x0c\x86\xf7\x3c\x85\xd0\x9c\xa5\xa5\x93\x5f\xa5\x1c\x46\x75\xd4\xf6\x38\x2b\x49\x6d\x79\x08\x25\xef\x5e\x62\xc3\xa5\x26\x29\x85\xd2\xc5\x93\xf1\xaf\x4f\xbf\x7f\x19\x7d\x76\x00\x00\x18\xdd\x3b\x0b\x59\x61\x25\x34\x50\xc4\x5c\x50\x7a\xf1\x8c\x06\x1e\xfa\x5d\x73\xa4\xfc\x36\x85\x05\x0d\xe0\x8d\x5e\x6f\x84\xdf\x8a\xba\xcc\x1b\x8f\x3a\xcd\x57\x87\x59\x5f\x4b\x19\x85\x29\xa6\xc0\xc2\xa3\x46\x34\xf0\x7c\x6f\xda\xdf\xcb\xdc\x48\xc2\x77\x6f\x5b\x8c\xfa\x1a\x71\x93\x4f\x32\xd6\x2e\xe7\x6e\x07\x57\xe7\x53\x54\x0e\x36\xdf\xfb\x73\x36\xf0\x47\xba\x06\x1e\xd0\x80\x86\xc4\x3f\x50\x25\x84\xdd\x26\x8e\xf5\x17\x55\xd8\x40\x4a\x3b\xf4\x74\x80\xd6\x63\xdf\x2f\x23\x6c\x67\x9c\xc9\xb5\x9c\xbf\xd1\xe8\xe4\x49\x78\x20\x1b\x1d\xf9\xb6\x97\xe8\x64\x92\x96\x77\x6a\x48\x22\xcb\xbf\x66\x7f\xfc\x6b\xf6\x4a\xb9\x74\xb5\x7e\xe9\xd6\xaf\x00\x00\x00\xff\xff\x30\xc9\x13\x11\x74\x05\x00\x00")

func bindataKafkatopicjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataKafkatopicjson,
		"kafka-topic.json",
	)
}



func bindataKafkatopicjson() (*asset, error) {
	bytes, err := bindataKafkatopicjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "kafka-topic.json",
		size: 1396,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588064915, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataKafkaconsumergroupjson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x97\xdd\x6a\xeb\x30\x0c\x80\xef\xfb\x14\xc6\xd7\xbd\x39\x87\x0d\x46\x5e\x65\x14\xa3\x29\x6a\x67\xe2\xbf\x59\x76\x69\x36\xfa\xee\x23\xe9\xd6\xce\x6b\x07\x1d\x14\x32\xe7\x2a\x20\x7f\x96\xf4\x45\x89\xc1\x6f\x0b\x21\x84\x90\x8c\xcf\x64\x41\x59\x4a\x20\x1b\x71\x08\x8e\x0b\x09\x9e\x0c\xc9\x46\xfc\x5b\x9e\x62\x08\x89\x36\x3e\xf6\xb2\x11\xb2\x83\x75\x07\xf2\xcb\x62\xea\xc3\xc0\x4b\xf4\x8e\xb3\xa5\xa8\x36\xd1\xe7\x20\x47\x60\x7f\xe0\xa4\x25\xe0\x1c\xc9\x92\x4b\x2c\x1b\xf1\x78\xdc\x7d\x2a\x3c\x72\x0e\x2c\x1d\x8b\xa8\x6f\x19\x97\x25\x8b\xde\x64\xeb\xca\x74\x97\xd3\x9e\xa5\x1f\x9f\xcb\xcb\x4c\xa4\x97\xac\x23\xb5\xb2\x11\x29\x66\xfa\x81\x3a\x14\x57\x83\x3b\x97\x2f\xab\xc0\x5a\x48\x70\x82\xee\xce\xa0\xfd\xf9\xbe\x2b\x5a\xe7\x00\x58\x6b\xff\x68\x32\x27\x8a\xaa\xe2\x11\x24\x1f\x34\xd6\x2c\x00\x06\x2c\xb5\xa0\x18\xc1\xd4\x3d\x8a\x0b\x26\x35\xff\x1c\x91\xd8\xe7\x88\xa4\xba\x07\xfe\x95\xcc\x1a\x0c\x5f\x69\xf3\x7f\x3a\x9b\x59\x88\x74\xda\xb5\xb3\x10\x89\x14\x8c\x46\xe0\x09\x64\xee\x6f\xed\xc2\x81\x70\x56\x42\x56\xbb\x79\xf9\xc0\x6e\x36\x3e\x98\x39\x79\x5b\xf5\x89\x16\xbc\xd1\xd8\xd7\xda\x3d\xb9\xe1\x8e\xa2\x68\x47\x98\x93\xf6\x6e\x0a\x8f\x9b\x7e\x50\x21\x2b\xa3\xad\x4e\xb5\x0e\xa4\x30\x19\x9a\x25\xae\xdf\xc5\x92\xf5\xb1\x9f\xc9\x60\x3e\x64\x2a\x9f\xcd\x76\x28\x4c\xac\x58\xbf\x56\x7b\xf4\x7e\x3a\x84\x2d\xfe\x25\x8f\x22\xb2\x5a\x94\xf1\xd5\x62\xff\x1e\x00\x00\xff\xff\x02\x03\x3b\x96\x37\x12\x00\x00")

func bindataKafkaconsumergroupjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataKafkaconsumergroupjson,
		"kafka-consumergroup.json",
	)
}



func bindataKafkaconsumergroupjson() (*asset, error) {
	bytes, err := bindataKafkaconsumergroupjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "kafka-consumergroup.json",
		size: 4663,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588064915, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataNginxjson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x97\xcf\x6a\xb4\x30\x14\xc5\xf7\x3e\x45\xc8\x7a\x36\xdf\x47\x0b\xc5\x57\x29\x43\xb8\x8d\xa7\x36\x4c\x12\xd3\xfc\x29\x23\x65\xde\xbd\xa8\xa5\xd6\x19\x87\xd6\x22\x8c\xba\x12\xcf\x3d\x49\xee\xcf\x23\x17\x7d\xcf\x18\x63\x8c\x07\xf9\x02\x43\xc2\x20\x12\xcf\x59\x27\xb6\x85\x48\x4f\x1a\x3c\x67\xff\x76\xbd\x26\x29\xa2\xac\x7c\xcd\x73\xc6\x6d\xa9\xec\x91\x7f\x2b\xc6\xda\xa1\x2f\xb4\xfa\xa9\x2b\x73\x03\x0a\xc9\xc3\xc0\xc6\xc0\x73\xf6\xf8\xb5\xa8\x3f\xaf\xf5\x59\x32\x18\xdb\xbb\x3b\xbc\xd2\xc9\xd8\xe1\xfa\xf1\x7d\x2e\xf6\x93\x3a\x85\x08\x2f\xda\xfb\xdd\xb8\xd7\xe3\x35\x29\x8f\x82\xe7\x2c\xfa\x84\x2b\xae\xae\x09\xd1\xb0\x86\xe1\xc3\x19\xd8\x0a\x8a\xd4\x9b\xee\x2e\x4c\xa7\xcb\x75\x3f\x20\x34\xd7\xe0\x48\x2e\xa5\xff\x73\x65\x2a\x0f\x69\x32\x28\x48\x04\x49\x7a\xdd\xc9\x8c\x90\x2c\x29\xa8\xa9\x38\x1e\xa1\x4a\x5e\x42\x1c\x1e\x82\x08\xf0\x6f\x4a\x62\xcd\xf1\x5c\xe5\xd9\x4c\x48\x53\x60\x9e\x49\x87\xe5\xd3\x6c\x02\xe4\xa0\x6c\xb1\x09\x10\x0f\xa7\x95\xa4\x30\x2f\xcc\xff\xdf\xc0\xdc\xcf\x3e\x00\x1c\xe4\xa6\x80\x8c\xb2\xdb\xe2\xa1\xe3\xd2\x78\xce\x95\xa9\x7c\xae\xd2\x4a\xd6\x37\x80\x99\x65\x14\xc0\x36\x3f\x02\x02\x47\xc8\x14\x55\x65\x6f\xc1\x31\xe7\x4b\x26\x5d\x12\x5a\x19\x15\xd7\x1a\xc8\x80\xa4\x69\x16\x61\xfd\x2c\x06\xa6\xf2\xf5\x46\x82\xf9\x84\x59\x7d\x36\xed\x14\x16\x86\x7c\xa9\xac\x70\xf0\x12\x36\x52\x39\xf3\xd7\xd9\x5f\xc7\xf2\x40\xd9\x67\x43\x7d\x9f\x9d\xb2\x8f\x00\x00\x00\xff\xff\x59\xfb\x53\x29\xe1\x10\x00\x00")

func bindataNginxjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataNginxjson,
		"nginx.json",
	)
}



func bindataNginxjson() (*asset, error) {
	bytes, err := bindataNginxjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "nginx.json",
		size: 4321,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588667846, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMachinegroupjson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x94\xcd\x4e\xc3\x30\x10\x84\xef\x79\x0a\x6b\xcf\xbd\x80\x80\x43\x5e\x05\x55\xd6\xe2\x2c\xa9\x25\xff\x84\xf5\x5a\xa8\xa0\xbe\x3b\x4a\x22\x08\x69\x52\x91\x22\x0e\x09\xa7\xaa\xe3\xd9\xd5\x7c\xca\xd8\xef\x85\x52\x4a\x41\x32\x07\xf2\xa8\x3d\x09\x42\xa9\x7a\xb1\x3b\x10\x7c\x72\x04\xa5\x7a\xd8\x0d\x9a\x41\xa1\x3a\xf2\x11\x4a\x05\xc6\xe5\x24\xc4\x1a\xb3\xc4\x64\xd0\x11\xc3\x37\xa7\x1c\x9b\x76\x18\x3c\x9a\x83\x0d\x54\x73\xcc\x0d\x74\xc7\xa7\xde\x05\x9e\x30\x65\x26\x4f\x41\x12\x94\xea\xf1\x6b\x76\xc8\xd0\xf9\x02\xfa\xe9\xa6\xdd\xd8\x63\xa2\xcb\x3e\x8c\xd7\xcc\xaf\x9b\xac\xfd\xc4\xe8\xfe\xef\xe6\xbd\x4c\x2f\xd9\x32\x55\x50\x2a\xe1\x4c\x17\x5c\x7d\x08\xdd\x92\xb7\x49\x6e\x2e\xd8\x2a\x14\x1c\x4c\x77\x13\xd3\x69\x3a\xf7\x03\x42\xfb\x9b\x1a\x34\x6b\xc9\x7f\xae\xfc\x86\x67\x25\x28\xd7\x46\x47\x87\x9e\x2a\xd4\xfd\x85\xd8\x72\xa9\x66\x48\xd6\xd4\xb1\xab\xaf\x79\x93\xdb\x37\x8e\xad\xd1\x59\xac\xb3\x6f\x28\x36\x06\x2d\xc8\x35\xc9\x02\xa6\x67\x74\x69\x21\xd4\xed\x12\xa8\xfb\xbf\x65\xea\xbe\x52\x6e\x74\x8d\xe7\x6f\xe3\x56\x61\xaa\xf8\x1a\x36\x8c\xe3\xc9\x47\x3e\xfe\xbb\xca\x8d\xb1\xb6\xdf\xba\x19\x9e\x75\x15\x6f\xa4\xec\x8b\xb1\xbe\x2f\x4e\xc5\x47\x00\x00\x00\xff\xff\xb3\x93\xf3\x10\xc7\x09\x00\x00")

func bindataMachinegroupjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataMachinegroupjson,
		"machinegroup.json",
	)
}



func bindataMachinegroupjson() (*asset, error) {
	bytes, err := bindataMachinegroupjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "machinegroup.json",
		size: 2503,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588843533, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMachinesetjson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x92\xc1\x4a\xc3\x40\x10\x86\xcf\xcd\x53\x2c\x73\xce\x45\x51\x91\xbc\x8a\x94\x65\x9c\x0e\x6d\x30\x9b\xac\x33\xb3\x60\x91\xbc\xbb\x24\x51\x63\x4c\x8b\x16\x7a\x68\x7a\x0a\x99\xfd\xe6\xe7\xff\x60\xde\x33\xe7\x9c\x03\xa5\x1d\x07\xf4\x81\x0d\xa1\x70\xc3\xb0\x7f\x30\x7c\xae\x18\x0a\xf7\x90\x8f\x33\x42\xe3\x6d\x23\x7b\x28\x1c\x50\x95\xd4\x58\x3c\x26\x6b\x94\xb0\x62\x81\x1f\xa4\xed\x63\xb7\x0c\x01\x69\x57\xd6\xac\x6c\xd0\x3f\xb6\x03\x03\x81\x51\x93\x70\xe0\xda\x14\x0a\xf7\xf4\xbd\x39\x36\xe8\xb9\x1a\xc3\xef\x9c\x7c\x4a\x50\x53\xa5\x50\x4f\x43\x0e\x87\xcd\x42\xbf\x14\xfa\xff\xfc\x30\x2b\xfc\x9a\x4a\xe1\x0d\x14\xce\x24\xf1\x11\x6a\x28\xe1\x3b\xeb\xae\xc9\xcd\x11\x6c\x83\x86\x23\x74\x37\x83\xda\xf9\xde\x1f\x0a\xdd\x57\x23\xd2\x92\xfb\x2f\xb4\xfa\xe7\x49\x6e\xa5\x49\xf1\xa2\x4e\x68\xb5\x3a\xb5\xf9\x92\x2f\x48\x58\x9b\x24\xc4\xfe\xe5\x51\xbd\x46\x26\x2f\x1c\xab\x92\x50\xcf\x2a\x74\xfb\x1f\xa1\xfb\x73\xfb\x5c\x91\x4a\x28\xeb\xab\xd2\xc1\xb7\xcb\xd2\x99\x4c\xd6\xd9\x74\xbe\xce\xda\xec\x23\x00\x00\xff\xff\x19\xf7\xdc\x33\xf1\x07\x00\x00")

func bindataMachinesetjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataMachinesetjson,
		"machineset.json",
	)
}



func bindataMachinesetjson() (*asset, error) {
	bytes, err := bindataMachinesetjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "machineset.json",
		size: 2033,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588640835, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"kafka-topic.json":         bindataKafkatopicjson,
	"kafka-consumergroup.json": bindataKafkaconsumergroupjson,
	"nginx.json":               bindataNginxjson,
	"machinegroup.json":        bindataMachinegroupjson,
	"machineset.json":          bindataMachinesetjson,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"kafka-consumergroup.json": {Func: bindataKafkaconsumergroupjson, Children: map[string]*bintree{}},
	"kafka-topic.json": {Func: bindataKafkatopicjson, Children: map[string]*bintree{}},
	"machinegroup.json": {Func: bindataMachinegroupjson, Children: map[string]*bintree{}},
	"machineset.json": {Func: bindataMachinesetjson, Children: map[string]*bintree{}},
	"nginx.json": {Func: bindataNginxjson, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
