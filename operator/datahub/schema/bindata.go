// Code generated by go-bindata.
// sources:
// kafka-topic.json
// kafka-consumergroup.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kafkaTopicJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\x65\xcf\xbe\xb4\xf4\xa4\x5f\x29\x41\x4c\xe5\x4d\x1b\x22\xd9\xae\x76\x75\x08\xc5\xff\x5e\x6c\x43\x5c\xe1\x94\x86\xde\x72\x32\x9e\x7d\x3b\x9a\x11\xfa\x6a\x88\x88\x58\xc3\x87\x24\xf8\x24\x06\x76\xb4\x8a\xcb\xc0\xf0\x16\x85\x1d\x3d\xb5\x9b\x16\x60\xf2\x3e\xe4\x0b\x3b\xe2\x33\x8e\x67\xf0\x8f\xa1\x5d\xc6\x99\x67\x1b\xc6\x53\xe0\x45\x9f\xd6\x31\x27\x81\x96\x2c\x49\x7a\x53\x76\xf4\x7a\x5d\xda\xce\x5b\xb8\x1e\x49\xae\xde\x7e\x35\x6a\x6b\x24\x0c\xb1\xa4\xbe\x76\xb9\xed\xb6\x73\x0d\xb1\xa8\x49\xf6\xcb\x7f\x7b\x9b\xcd\xf2\x59\x4e\x59\x3a\x76\x64\xb9\xc8\x2f\xd4\x1a\xc2\xcf\x8d\xb5\xbe\xa2\x0a\xeb\x60\xd8\xa0\x97\x1d\x34\xed\xf7\xfe\xa8\x30\x7f\x75\x44\x78\xe4\xfc\x0f\x1a\x1d\x11\x49\x3a\x78\x0d\x88\xf7\x3f\xa2\x23\xa2\xde\x59\xe5\xf9\xbf\x55\x2a\xe5\xd0\xd4\xfa\xa1\x99\xbe\x03\x00\x00\xff\xff\x2e\xff\x2c\xd5\xea\x03\x00\x00")

func kafkaTopicJsonBytes() ([]byte, error) {
	return bindataRead(
		_kafkaTopicJson,
		"kafka-topic.json",
	)
}

func kafkaTopicJson() (*asset, error) {
	bytes, err := kafkaTopicJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kafka-topic.json", size: 1002, mode: os.FileMode(420), modTime: time.Unix(1580807819, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kafkaConsumergroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x96\x4f\x6b\xb4\x30\x10\x87\xef\x7e\x8a\x90\xb3\x97\xf7\xa5\x87\xe2\x57\x29\x4b\x98\x8e\xb3\xdb\x60\xfe\x35\x93\x40\xa5\xf8\xdd\x8b\x0a\x6b\x53\xb7\x60\xa1\x74\xd1\x93\x30\x79\xf2\x9b\x79\x8c\xa2\xef\x95\x10\x42\x48\xc6\x17\xb2\xa0\x2c\x25\x90\x8d\x98\x8b\xd3\x42\x82\x67\x43\xb2\x11\xff\xea\xa5\x86\x90\xe8\xe2\x63\x2f\x1b\x21\x3b\x38\x77\x20\x3f\x2d\xa6\x3e\x8c\xbc\x44\xef\x38\x5b\x8a\xea\x12\x7d\x0e\x72\x02\x86\x99\x93\x96\x80\x73\x24\x4b\x2e\xb1\x6c\xc4\xd3\x75\xf7\xd2\x78\xe2\x1c\x58\xba\x36\x51\x5f\x12\xeb\x92\x45\x6f\xb2\x75\x65\xdc\xed\xd8\x55\xfc\x74\xad\x6f\x33\x91\x5e\xb3\x8e\xd4\xca\x46\xa4\x98\xe9\x1b\x6a\x6e\xae\x46\x77\x2e\x6f\x56\x81\xb5\x90\x60\x81\x1e\x56\xd0\xb0\xde\xb7\x61\x74\x0e\x80\x7b\x9d\x1f\x4d\xe6\x44\x51\xed\xf8\x08\x92\x0f\x1a\xf7\x2c\x10\x89\x7d\x8e\x48\xaa\x7b\x64\xf5\x93\x07\xea\x0c\x86\x37\xda\xfc\xbf\x9f\xcd\x21\x44\x3a\xed\xda\x43\x88\x44\x0a\x46\x23\xf0\x21\x64\x38\x10\x1e\xc7\x08\x33\x27\x6f\x77\xfd\xce\x04\x6f\x34\xf6\x7b\x9d\x9e\xdc\xf8\xb3\xa5\xe8\x8d\x30\x27\xed\xdd\x3d\x3c\x7e\x41\x03\x0c\x58\x6a\x41\x31\x82\xd9\xfe\x69\xff\x8b\x13\x29\x2a\xa7\xaa\xac\x9f\xaa\xe1\x23\x00\x00\xff\xff\x87\x54\x74\x80\x0d\x0b\x00\x00")

func kafkaConsumergroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_kafkaConsumergroupJson,
		"kafka-consumergroup.json",
	)
}

func kafkaConsumergroupJson() (*asset, error) {
	bytes, err := kafkaConsumergroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kafka-consumergroup.json", size: 2829, mode: os.FileMode(420), modTime: time.Unix(1580807963, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kafka-topic.json": kafkaTopicJson,
	"kafka-consumergroup.json": kafkaConsumergroupJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"kafka-consumergroup.json": &bintree{kafkaConsumergroupJson, map[string]*bintree{}},
	"kafka-topic.json": &bintree{kafkaTopicJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

